apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    ndkVersion getPropertyVal('ndkVersion', '23.1.7779620')
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId "engineer.echo.yi"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true

        //各个模块化Modular无法使用 kapt 需要添加如下配置解决
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [
                        "room.schemaLocation": "$rootDir/schemas".toString() // Room 输出文件夹
                ]
            }
        }
        manifestPlaceholders = [
                NETWORK_SECURITY_CONFIG: "@xml/network_security_config" // 默认网络安全配置
        ]
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', "arm64-v8a", 'x86'
        }
    }

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }

    compileOptions {
        incremental true // 增量编译
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        // pickFirst '**/xxx.so'
        // exclude 'lib/arm64-v8a/xxx.so'
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    signingConfigs {
        def storeFilePath = getPropertyVal('StoreFile', "null")
        release {
            storeFile file(storeFilePath)
            storePassword getPropertyVal('StorePassword')
            keyAlias getPropertyVal('KeyAlias')
            keyPassword getPropertyVal('KeyPassword')
            v2SigningEnabled true
            println("storeFile = $storeFilePath")
        }
        debug {
            storeFile rootProject.debugKey.storeFile
            storePassword rootProject.debugKey.storePassword
            keyAlias rootProject.debugKey.keyAlias
            keyPassword rootProject.debugKey.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "build_time", "release_${currentTime()}"
        }
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "build_time", "debug_${currentTime()}"
        }
    }

    buildTypes.each {
        it.buildConfigField("String", "BAIDU_AK", "\"${getPropertyVal("baiduAk")}\"")
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (requested.name == 'support-v4') {
                    // details.useVersion ""
                }
            }
        }
    }
}

def getImpl(id) {
    if (modulePlugin(id) == "com.android.library") {
        return ":yi:${id}"
    } else {
        return ""
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // modules
    implementation project(":yi:common")
    // 模块编译
    [getImpl("consumer"), getImpl("im"), getImpl("live"), getImpl("producer")].each {
        if (it != null && it.length() > 0) {
            implementation project(it)
        }
    }

    // kapt
    kapt rootProject.ext.glide.compiler
    kapt rootProject.ext.framework.easyapiCompiler
    // coroutines
    implementation rootProject.ext.androidx.coroutineCore
    implementation rootProject.ext.androidx.coroutineAndroid

    // test
    testImplementation rootProject.ext.test.junit
    androidTestImplementation rootProject.ext.test.runner
    androidTestImplementation rootProject.ext.test.espresso
}
