package engineer.echo.easyapi.compiler;

import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Modifier;

import engineer.echo.easyapi.annotation.EasyJobHelper;


final class CompilerHelper {

    static boolean createMetaInfoFile(Filer filer, String appId, HashMap<String, String> meta) {
        // appId
        FieldSpec fieldAppId = FieldSpec.builder(String.class, "APP_ID")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL, Modifier.STATIC)
                .initializer("$S",appId)
                .build();

        // metaInfo
        TypeName typeName = ParameterizedTypeName.get(ConcurrentHashMap.class, String.class, String.class);
        FieldSpec metaInfo = FieldSpec.builder(typeName, "metaInfo")
                .addModifiers(Modifier.FINAL, Modifier.STATIC, Modifier.PRIVATE)
                .initializer("new $T()", ConcurrentHashMap.class)
                .build();

        // static
        CodeBlock.Builder codeBuilder =CodeBlock.builder();
        for (String key : meta.keySet()) {
            codeBuilder.addStatement("$N.put($S, $S)", "metaInfo", key, meta.get(key));
        }

        // getClassById
        MethodSpec method = MethodSpec.methodBuilder("getClassById")
                .returns(String.class)
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addParameter(String.class, "id")
                .addStatement(
                        "if ($N.containsKey($N)) return $N.get($N)",
                        "metaInfo", "id", "metaInfo", "id"
                )
                .addStatement("return null")
                .build();

        // class
        TypeSpec classType = TypeSpec.classBuilder(EasyJobHelper.CLASS)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addStaticBlock(codeBuilder.build())
                .addField(metaInfo)
                .addField(fieldAppId)
                .addMethod(method)
                .build();
        // file
        JavaFile javaFile = JavaFile.builder(EasyJobHelper.PACKAGE, classType)
                .addFileComment("This codes are generated by EasyApi automatically. Do not modify!")
                .build();
        try {
            javaFile.writeTo(filer);
            return true;
        } catch (IOException e) {
            return false;
        }
    }
}
