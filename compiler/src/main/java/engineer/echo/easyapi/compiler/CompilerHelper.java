package engineer.echo.easyapi.compiler;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.List;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;

import engineer.echo.easyapi.annotation.EasyJobHelper;


final class CompilerHelper {

    static boolean createMetaInfoFile(Filer filer, String appId, String uniqueId, String className) {
        // appId
        FieldSpec fieldAppId = FieldSpec.builder(String.class, "APP_ID")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL, Modifier.STATIC)
                .initializer("$S", appId)
                .build();

        // metaInfo
        FieldSpec metaInfo = FieldSpec.builder(String.class, "metaInfo")
                .addModifiers(Modifier.FINAL, Modifier.STATIC, Modifier.PUBLIC)
                .initializer("$S", className)
                .build();

        // uniqueId
        FieldSpec fieldId = FieldSpec.builder(String.class, "uniqueId")
                .addModifiers(Modifier.FINAL, Modifier.STATIC, Modifier.PUBLIC)
                .initializer("$S", uniqueId)
                .build();

        // class
        TypeSpec classType = TypeSpec.classBuilder(EasyJobHelper.CLASS)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addField(metaInfo)
                .addField(fieldAppId)
                .addField(fieldId)
                .build();
        // file
        JavaFile javaFile = JavaFile.builder(EasyJobHelper.generatePackage(uniqueId), classType)
                .addFileComment("This codes are generated by EasyApi automatically. Do not modify!")
                .build();
        try {
            javaFile.writeTo(filer);
            return true;
        } catch (IOException e) {
            return false;
        }
    }

    static String createRetrofitApi(Filer filer, TypeElement interfaceElement) {
        try {
            String className = interfaceElement.getQualifiedName().toString();
            String simpleName = interfaceElement.getSimpleName().toString();
            String packageName = className.replace("." + simpleName, "");

            // interface
            TypeSpec.Builder interfaceBuilder = TypeSpec.interfaceBuilder(simpleName + "Retrofit")
                    .addModifiers(Modifier.PUBLIC);
            List<? extends Element> elements = interfaceElement.getEnclosedElements();
            for (Element element : elements) {
                if (element.getKind() == ElementKind.METHOD) {

                    AnnotationSpec getSpec = AnnotationSpec.builder(ClassName.get("retrofit2.http", "GET"))
                            .addMember("value", "$S", "xxx")
                            .build();


                    MethodSpec methodSpec = MethodSpec.methodBuilder(element.getSimpleName().toString())
                            .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                            .addAnnotation(getSpec)
                            .build();
                    interfaceBuilder.addMethod(methodSpec);
                }
            }
            TypeSpec interfaceType = interfaceBuilder.build();

            // file
            JavaFile javaFile = JavaFile.builder(packageName, interfaceType)
                    .addFileComment("This codes are generated by EasyApi automatically. Do not modify!")
                    .build();
            try {
                javaFile.writeTo(filer);
                return null;
            } catch (IOException e) {
                return "EasyApi writeFailed " + e.getMessage();
            }
        } catch (Exception e) {
            return "EasyApi classFailed " + e.toString();
        }
    }
}
