apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: rootProject.ext.protoBuf.plugin

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.app.id
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.app.verCode
        versionName rootProject.ext.app.verName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //开启renderscript支持，否则编译时找不到RenderScript相关类
        renderscriptTargetApi rootProject.ext.android.renderscriptTarget
        renderscriptSupportModeEnabled true
    }
    dataBinding {
        enabled = true
    }
    viewBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // build
    implementation rootProject.ext.build.kotlinLib
    implementation rootProject.ext.androidx.lifecycleExt
    // androidx
    implementation rootProject.ext.androidx.appcompat
    implementation rootProject.ext.androidx.ktx
    implementation rootProject.ext.androidx.constraintlayout
    implementation rootProject.ext.androidx.recyclerview
    implementation rootProject.ext.androidx.coroutineAndroid
    implementation rootProject.ext.androidx.viewpager2
    implementation rootProject.ext.androidx.material
    implementation rootProject.ext.androidx.flexbox
    // retrofit
    implementation rootProject.ext.retrofit.runtime
    implementation rootProject.ext.retrofit.loggingInterceptor
    implementation rootProject.ext.retrofit.gsonConverter
    implementation rootProject.ext.retrofit.rxJava2Adapter
    // framework
    implementation rootProject.ext.framework.oneActivity
    implementation rootProject.ext.framework.autoFlowLayout
    implementation rootProject.ext.framework.easyPermissions
    implementation rootProject.ext.framework.viewAnimator
    implementation rootProject.ext.framework.liveBus
    implementation rootProject.ext.framework.mmkv
    implementation rootProject.ext.framework.workManager.runtime
    implementation rootProject.ext.framework.workManager.firebase
    kapt rootProject.ext.framework.room.compiler
    implementation rootProject.ext.framework.room.runtime
    implementation rootProject.ext.framework.room.rxjava2
    implementation rootProject.ext.framework.rxAndroid
    // test
    testImplementation rootProject.ext.test.junit
    androidTestImplementation rootProject.ext.test.runner
    androidTestImplementation rootProject.ext.test.espresso
    // ProtocolBuffer
    implementation rootProject.ext.protoBuf.java
    implementation rootProject.ext.protoBuf.javaFormat
    // Widgets
    implementation rootProject.ext.widget.syntaxView
    implementation rootProject.ext.widget.rangeBar
    // module
    implementation project(':whisper')
    implementation project(':imessenger')
    implementation project(':easyprinter')
}


protobuf {
    protoc {
        artifact = rootProject.ext.protoBuf.compile
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
                cpp {}
            }
        }
    }
    //生成目录
    generatedFilesBaseDir = "$projectDir/src/generated"
}

apply plugin: "com.vanniktech.dependency.graph.generator"
apply plugin: 'project-report'
//rootProject.plugins.apply(DependencyGraphGeneratorPlugin::class.java)
//rootProject.configure < DependencyGraphGeneratorExtension > {
//    generators.create("engineerLibrarys") {
//        include = { dependency -> dependency.moduleGroup.startsWith("engineer.echo") }
//        children = { true }
//        dependencyNode = { node, dependency -> node.add(Style.FILLED, Color.rgb("#ffcb2b")) }
//    }
//}

import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorPlugin
import guru.nidi.graphviz.attribute.Color
import guru.nidi.graphviz.attribute.Style
rootProject.plugins.apply(DependencyGraphGeneratorPlugin)
dependencyGraphGenerator {
    generators {
        engineerLibrarys {
            include = { dependency -> dependency.getModuleGroup().startsWith("engineer.echo") } // Only want Firebase.
            children = { dependency -> true } // Include transitive dependencies.
            dependencyNode = { node, dependency -> node.add(Style.FILLED, Color.rgb("#ffcb2b")) } // Give them some color.
        }
    }
}