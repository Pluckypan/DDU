// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace engineer {
namespace echo {

namespace {

const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_PhoneNumber_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User_PhoneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_User_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_User_2eproto() {
  protobuf_AddDesc_User_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "User.proto");
  GOOGLE_CHECK(file != NULL);
  User_descriptor_ = file->message_type(0);
  static const int User_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, extra_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::internal_default_instance(),
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_),
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_));
  User_PhoneNumber_descriptor_ = User_descriptor_->nested_type(0);
  static const int User_PhoneNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_PhoneNumber, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_PhoneNumber, type_),
  };
  User_PhoneNumber_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_PhoneNumber_descriptor_,
      User_PhoneNumber::internal_default_instance(),
      User_PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_PhoneNumber, _has_bits_),
      -1,
      -1,
      sizeof(User_PhoneNumber),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_PhoneNumber, _internal_metadata_));
  User_PhoneType_descriptor_ = User_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_User_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, User::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_PhoneNumber_descriptor_, User_PhoneNumber::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_User_2eproto() {
  User_default_instance_.Shutdown();
  delete User_reflection_;
  User_PhoneNumber_default_instance_.Shutdown();
  delete User_PhoneNumber_reflection_;
}

void protobuf_InitDefaults_User_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  User_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  User_PhoneNumber_default_instance_.DefaultConstruct();
  User_default_instance_.get_mutable()->InitAsDefaultInstance();
  User_PhoneNumber_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_User_2eproto_once_);
void protobuf_InitDefaults_User_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_User_2eproto_once_,
                 &protobuf_InitDefaults_User_2eproto_impl);
}
void protobuf_AddDesc_User_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUser.proto\022\rengineer.echo\"\355\001\n\004User\022\014\n\004"
    "name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\r\n\005email\030\003 \001(\t\022.\n"
    "\005phone\030\004 \003(\0132\037.engineer.echo.User.PhoneN"
    "umber\022\r\n\005extra\030\005 \001(\t\032P\n\013PhoneNumber\022\016\n\006n"
    "umber\030\001 \002(\t\0221\n\004type\030\002 \001(\0162\035.engineer.ech"
    "o.User.PhoneType:\004HOME\"+\n\tPhoneType\022\n\n\006M"
    "OBILE\020\000\022\010\n\004HOME\020\001\022\010\n\004WORK\020\002B!\n\023engineer."
    "echo.protoB\nUserEntity", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_User_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_User_2eproto_once_);
void protobuf_AddDesc_User_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_User_2eproto_once_,
                 &protobuf_AddDesc_User_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_User_2eproto {
  StaticDescriptorInitializer_User_2eproto() {
    protobuf_AddDesc_User_2eproto();
  }
} static_descriptor_initializer_User_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* User_PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_PhoneType_descriptor_;
}
bool User_PhoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const User_PhoneType User::MOBILE;
const User_PhoneType User::HOME;
const User_PhoneType User::WORK;
const User_PhoneType User::PhoneType_MIN;
const User_PhoneType User::PhoneType_MAX;
const int User::PhoneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_PhoneNumber::kNumberFieldNumber;
const int User_PhoneNumber::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_PhoneNumber::User_PhoneNumber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_User_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:engineer.echo.User.PhoneNumber)
}

void User_PhoneNumber::InitAsDefaultInstance() {
}

User_PhoneNumber::User_PhoneNumber(const User_PhoneNumber& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:engineer.echo.User.PhoneNumber)
}

void User_PhoneNumber::SharedCtor() {
  _cached_size_ = 0;
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

User_PhoneNumber::~User_PhoneNumber() {
  // @@protoc_insertion_point(destructor:engineer.echo.User.PhoneNumber)
  SharedDtor();
}

void User_PhoneNumber::SharedDtor() {
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User_PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_PhoneNumber_descriptor_;
}

const User_PhoneNumber& User_PhoneNumber::default_instance() {
  protobuf_InitDefaults_User_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<User_PhoneNumber> User_PhoneNumber_default_instance_;

User_PhoneNumber* User_PhoneNumber::New(::google::protobuf::Arena* arena) const {
  User_PhoneNumber* n = new User_PhoneNumber;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_PhoneNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:engineer.echo.User.PhoneNumber)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_number()) {
      number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool User_PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:engineer.echo.User.PhoneNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "engineer.echo.User.PhoneNumber.number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .engineer.echo.User.PhoneType type = 2 [default = HOME];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::engineer::echo::User_PhoneType_IsValid(value)) {
            set_type(static_cast< ::engineer::echo::User_PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:engineer.echo.User.PhoneNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:engineer.echo.User.PhoneNumber)
  return false;
#undef DO_
}

void User_PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:engineer.echo.User.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.PhoneNumber.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // optional .engineer.echo.User.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:engineer.echo.User.PhoneNumber)
}

::google::protobuf::uint8* User_PhoneNumber::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:engineer.echo.User.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.PhoneNumber.number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional .engineer.echo.User.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:engineer.echo.User.PhoneNumber)
  return target;
}

size_t User_PhoneNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:engineer.echo.User.PhoneNumber)
  size_t total_size = 0;

  // required string number = 1;
  if (has_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }
  // optional .engineer.echo.User.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:engineer.echo.User.PhoneNumber)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User_PhoneNumber* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_PhoneNumber>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:engineer.echo.User.PhoneNumber)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:engineer.echo.User.PhoneNumber)
    UnsafeMergeFrom(*source);
  }
}

void User_PhoneNumber::MergeFrom(const User_PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:engineer.echo.User.PhoneNumber)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void User_PhoneNumber::UnsafeMergeFrom(const User_PhoneNumber& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_has_number();
      number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void User_PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:engineer.echo.User.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_PhoneNumber::CopyFrom(const User_PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:engineer.echo.User.PhoneNumber)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool User_PhoneNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void User_PhoneNumber::Swap(User_PhoneNumber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_PhoneNumber::InternalSwap(User_PhoneNumber* other) {
  number_.Swap(&other->number_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User_PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_PhoneNumber_descriptor_;
  metadata.reflection = User_PhoneNumber_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kNameFieldNumber;
const int User::kIdFieldNumber;
const int User::kEmailFieldNumber;
const int User::kPhoneFieldNumber;
const int User::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_User_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:engineer.echo.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:engineer.echo.User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:engineer.echo.User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  protobuf_InitDefaults_User_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:engineer.echo.User)
  if (_has_bits_[0 / 32] & 23u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = 0;
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_extra()) {
      extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  phone_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:engineer.echo.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "engineer.echo.User.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "engineer.echo.User.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // repeated .engineer.echo.User.PhoneNumber phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(input->IncrementRecursionDepth());
         parse_loop_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_phone;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_extra;
        break;
      }

      // optional string extra = 5;
      case 5: {
        if (tag == 42) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), this->extra().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "engineer.echo.User.extra");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:engineer.echo.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:engineer.echo.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:engineer.echo.User)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .engineer.echo.User.PhoneNumber phone = 4;
  for (unsigned int i = 0, n = this->phone_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phone(i), output);
  }

  // optional string extra = 5;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:engineer.echo.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:engineer.echo.User)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .engineer.echo.User.PhoneNumber phone = 4;
  for (unsigned int i = 0, n = this->phone_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->phone(i), false, target);
  }

  // optional string extra = 5;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engineer.echo.User.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:engineer.echo.User)
  return target;
}

size_t User::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:engineer.echo.User)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:engineer.echo.User)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 20u) {
    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string extra = 5;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  // repeated .engineer.echo.User.PhoneNumber phone = 4;
  {
    unsigned int count = this->phone_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phone(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:engineer.echo.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:engineer.echo.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:engineer.echo.User)
    UnsafeMergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:engineer.echo.User)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void User::UnsafeMergeFrom(const User& from) {
  GOOGLE_DCHECK(&from != this);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (from.has_extra()) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:engineer.echo.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:engineer.echo.User)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->phone())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  email_.Swap(&other->email_);
  phone_.UnsafeArenaSwap(&other->phone_);
  extra_.Swap(&other->extra_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User_PhoneNumber

// required string number = 1;
bool User_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void User_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
void User_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void User_PhoneNumber::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
const ::std::string& User_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.PhoneNumber.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:engineer.echo.User.PhoneNumber.number)
}
void User_PhoneNumber::set_number(const char* value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:engineer.echo.User.PhoneNumber.number)
}
void User_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:engineer.echo.User.PhoneNumber.number)
}
::std::string* User_PhoneNumber::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:engineer.echo.User.PhoneNumber.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User_PhoneNumber::release_number() {
  // @@protoc_insertion_point(field_release:engineer.echo.User.PhoneNumber.number)
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:engineer.echo.User.PhoneNumber.number)
}

// optional .engineer.echo.User.PhoneType type = 2 [default = HOME];
bool User_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void User_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void User_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void User_PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
::engineer::echo::User_PhoneType User_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.PhoneNumber.type)
  return static_cast< ::engineer::echo::User_PhoneType >(type_);
}
void User_PhoneNumber::set_type(::engineer::echo::User_PhoneType value) {
  assert(::engineer::echo::User_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:engineer.echo.User.PhoneNumber.type)
}

inline const User_PhoneNumber* User_PhoneNumber::internal_default_instance() {
  return &User_PhoneNumber_default_instance_.get();
}
// -------------------------------------------------------------------

// User

// required string name = 1;
bool User::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void User::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void User::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:engineer.echo.User.name)
}
void User::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:engineer.echo.User.name)
}
void User::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:engineer.echo.User.name)
}
::std::string* User::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:engineer.echo.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:engineer.echo.User.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:engineer.echo.User.name)
}

// required int32 id = 2;
bool User::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void User::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void User::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 User::id() const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.id)
  return id_;
}
void User::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:engineer.echo.User.id)
}

// optional string email = 3;
bool User::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void User::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
void User::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
void User::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& User::email() const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:engineer.echo.User.email)
}
void User::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:engineer.echo.User.email)
}
void User::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:engineer.echo.User.email)
}
::std::string* User::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:engineer.echo.User.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:engineer.echo.User.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:engineer.echo.User.email)
}

// repeated .engineer.echo.User.PhoneNumber phone = 4;
int User::phone_size() const {
  return phone_.size();
}
void User::clear_phone() {
  phone_.Clear();
}
const ::engineer::echo::User_PhoneNumber& User::phone(int index) const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.phone)
  return phone_.Get(index);
}
::engineer::echo::User_PhoneNumber* User::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:engineer.echo.User.phone)
  return phone_.Mutable(index);
}
::engineer::echo::User_PhoneNumber* User::add_phone() {
  // @@protoc_insertion_point(field_add:engineer.echo.User.phone)
  return phone_.Add();
}
::google::protobuf::RepeatedPtrField< ::engineer::echo::User_PhoneNumber >*
User::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:engineer.echo.User.phone)
  return &phone_;
}
const ::google::protobuf::RepeatedPtrField< ::engineer::echo::User_PhoneNumber >&
User::phone() const {
  // @@protoc_insertion_point(field_list:engineer.echo.User.phone)
  return phone_;
}

// optional string extra = 5;
bool User::has_extra() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void User::set_has_extra() {
  _has_bits_[0] |= 0x00000010u;
}
void User::clear_has_extra() {
  _has_bits_[0] &= ~0x00000010u;
}
void User::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& User::extra() const {
  // @@protoc_insertion_point(field_get:engineer.echo.User.extra)
  return extra_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:engineer.echo.User.extra)
}
void User::set_extra(const char* value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:engineer.echo.User.extra)
}
void User::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:engineer.echo.User.extra)
}
::std::string* User::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:engineer.echo.User.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_extra() {
  // @@protoc_insertion_point(field_release:engineer.echo.User.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:engineer.echo.User.extra)
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace echo
}  // namespace engineer

// @@protoc_insertion_point(global_scope)
