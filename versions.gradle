private static def addRepos(RepositoryHandler handler) {
    // handler.maven { url 'http://localhost:8081/repository/maven-releases/' }
    handler.maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    handler.maven { url 'https://dl.bintray.com/thelasterstar/maven/' }
    handler.jcenter()
    handler.google()
    handler.maven { url 'https://jitpack.io' }
}

ext {
    addRepos = this.&addRepos
    getPropertyVal = this.&getPropertyVal
    localProperties = this.&localProperties
    currentTime = this.&currentTime
    modulePlugin = this.&modulePlugin
    moduleAction = this.&moduleAction

    app = [
            id     : "engineer.echo.study",
            verCode: 1,
            verName: "0.0.1"
    ]

    android = [
            compileSdkVersion : 28,
            minSdkVersion     : 21,
            targetSdkVersion  : 28,
            renderscriptTarget: 24,
    ]

    build = [
            gradleX    : 'com.android.tools.build:gradle:4.0.2',
            kotlinX    : "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61",
            kotlinLib  : "org.jetbrains.kotlin:kotlin-stdlib:1.3.61",
            happyMaven : "engineer.echo:happymaven:0.0.9",
            autoService: 'com.google.auto.service:auto-service:1.0-rc4',
            javapoet   : 'com.squareup:javapoet:1.12.1'
    ]

    debugKey = [
            storeFile    : file('./debug.keystore'),
            storePassword: "android",
            keyAlias     : "androiddebugkey",
            keyPassword  : "android"
    ]

    HappyMaven = [
            "GROUP_ID"         : "engineer.echo",
            "PACKAGING"        : "aar",
            "LICENSE_NAME"     : "The Apache Software License, Version 2.0",
            "LICENSE_URL"      : "http://www.apache.org/licenses/LICENSE-2.0.txt",
            "LICENSE_DIST"     : "repo",
            "DEVELOPER_ID"     : "pluckypan",
            "DEVELOPER_NAME"   : "Plucky Pan",
            "RELEASE_REPO_URL" : getPropertyVal("RELEASE_REPO_URL", "https://oss.sonatype.org/service/local/staging/deploy/maven2/"),
            "SNAPSHOT_REPO_URL": getPropertyVal("SNAPSHOT_REPO_URL", "https://oss.sonatype.org/content/repositories/snapshots/"),
            "NEXUS_USER_NAME"  : getPropertyVal("NEXUS_USER_NAME"),
            "NEXUS_PASSWORD"   : getPropertyVal("NEXUS_PASSWORD")
    ]

    androidx = [
            ktx             : 'androidx.core:core-ktx:1.2.0-alpha01',
            coroutineCore   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3",
            coroutineAndroid: "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3",
            viewmodelKtx    : "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0-beta01",
            appcompat       : 'androidx.appcompat:appcompat:1.1.0',
            constraintlayout: 'androidx.constraintlayout:constraintlayout:1.1.3',
            recyclerview    : 'androidx.recyclerview:recyclerview:1.0.0-alpha1',
            lifecycleExt    : 'androidx.lifecycle:lifecycle-extensions:2.2.0',
            viewpager2      : 'androidx.viewpager2:viewpager2:1.0.0',
            material        : 'com.google.android.material:material:1.3.0'
    ]

    protoBuf = [
            java      : "com.google.protobuf:protobuf-java:3.6.1",
            plugin    : "com.google.protobuf",
            gradle    : "com.google.protobuf:protobuf-gradle-plugin:0.8.10",
            compile   : "com.google.protobuf:protoc:3.1.0",
            javaFormat: "com.googlecode.protobuf-java-format:protobuf-java-format:1.2",
            javaUtil  : "com.google.protobuf:protobuf-java-util:3.6.0"
    ]

    workManager = [
            runtime : "android.arch.work:work-runtime:1.0.0-alpha01",
            firebase: "android.arch.work:work-firebase:1.0.0-alpha01",
            testing : "android.arch.work:work-testing:1.0.0-alpha01"
    ]

    room = [
            compiler: "android.arch.persistence.room:compiler:2.2.0",
            runtime : "android.arch.persistence.room:runtime:2.2.0",
            rxjava2 : "android.arch.persistence.room:rxjava2:2.2.0",
            testing : "android.arch.persistence.room:testing:2.2.0"
    ]

    framework = [
            oneActivity      : "engineer.echo.oneactivity:core:0.0.1",
            autoFlowLayout   : "com.github.LRH1993:AutoFlowLayout:1.0.5",
            easyPermissions  : "pub.devrel:easypermissions:3.0.0",
            viewAnimator     : "com.github.florent37:viewanimator:1.1.0",
            liveBus          : "com.jeremyliao:live-event-bus-x:1.4.4",
            mmkv             : "com.tencent:mmkv:1.0.22",
            easyapi          : "engineer.echo:easyapi:0.0.2",
            easyapiAnnotation: "engineer.echo.easyapi:annotation:0.0.2",
            easyapiCompiler  : "engineer.echo.easyapi:compiler:0.0.2",
            workManager      : workManager,
            room             : room,
            rxAndroid        : "io.reactivex.rxjava2:rxandroid:2.0.1",
            videocache       : "com.danikula:videocache:2.7.1"
    ]

    support = [
            annotations: "com.android.support:support-annotations:27.1.1"
    ]

    widget = [
            syntaxView           : "com.github.Badranh:Syntax-View-Android:0.1.5",
            sectionedRecyclerview: "com.truizlop.sectionedrecyclerview:library:1.2.0",
            rangeBar             : "com.github.Greymamba:Rangebar:1.2.1",
            gravitySnapHelper    : "com.github.rubensousa:gravitysnaphelper:1.5",
            lottie               : "com.airbnb.android:lottie:3.3.1",
            smartRefreshLayout   : "com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-16",
            smartRefreshHeader   : "com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-16",
            baseQuickAdapter     : "com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.2"
    ]

    glide = [
            runtime        : "com.github.bumptech.glide:glide:4.11.0",
            compiler       : "com.github.bumptech.glide:compiler:4.11.0",
            integration    : "com.github.bumptech.glide:recyclerview-integration:4.7.1",
            transformations: "jp.wasabeef:glide-transformations:3.3.0"
    ]

    retrofit = [
            runtime           : "com.squareup.retrofit2:retrofit:2.7.0",
            gsonConverter     : "com.squareup.retrofit2:converter-gson:2.7.0",
            loggingInterceptor: "com.squareup.okhttp3:logging-interceptor:3.9.0",
            rxJava2Adapter    : "com.squareup.retrofit2:adapter-rxjava2:2.7.0"
    ]

    consumer = [
            // last 9.12.0
            weibo: "com.sina.weibo.sdk:core:4.4.3:openDefaultRelease@aar"
    ]

    test = [
            junit   : "junit:junit:4.12",
            runner  : "androidx.test:runner:1.1.0-alpha4",
            espresso: "androidx.test.espresso:espresso-core:3.1.0-alpha4"
    ]
}

def static currentTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08:00"))
}

def localProperties(key, defaultVal) {
    Properties properties = new Properties()
    if (project.rootProject.file('local.properties').exists()) {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty(key, defaultVal)
    } else {
        return null
    }
}

def getPropertyVal(key, defVal = "") {
    def local = localProperties(key, defVal)
    if (local != null && local.length() > 0) {
        return local
    } else if (System.getProperty(key)) {
        return System.getProperty(key)
    } else if (project.hasProperty(key)) {
        return project.getProperty(key)
    } else {
        return defVal
    }
}

def modulePlugin(id) {
    // 等于 true 表示参与合包编译
    if ("${localProperties(id, "true")}" == "false") {
        return "com.android.application"
    } else {
        return "com.android.library"
    }
}

def moduleAction(id) {
    // 等于 true 表示参与合包编译
    if ("${localProperties(id, "true")}" == "false") {
        return "android.intent.action.MAIN"
    } else {
        return "android.intent.action.${id}"
    }
}

